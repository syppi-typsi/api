openapi: "3.0.2"
info:
  title: syppiüßÉ / typsiüçπ API
  description: The API that powers üí™ syppiüßÉ / typsiüçπ
  version: "1.0"
servers:
  - url: http://localhost:3000
    description: Test Endpoint

components:
  schemas:
    drink_data:
      type: object
      description: "A drink objects data"
      required:
        - name
        - category
        - added_on
        - producer
      properties:
        name:
          type: string
          description: "Name of the drink"
        producer:
          type: string
          description: "The current manufacturer"
        brand:
          type: string
          description: "The general brand that the drink belongs to"
        description:
          type: string
          description: "Should be between 1-5 sentences in length"
        product_image:
          type: string
          description: "URL to the product image file"
        category:
          type: integer
          description: "The category ID the drink belongs to"
        added_on:
          type: string
          description: "ISO 8601 date and time of when the drink was added"
        rating:
          type: integer
          description: "The average rating for the drink"
        volumes:
          type: array
          description: "All available volumes of the drink"
          items:
            type: integer
            description: "Measured in milliliters"
        abv:
          type: number
          description: "Alcohol by volume, as number between 0-1"
        places:
          type: array
          description: "IDs of where the drink is available"
          items:
            type: integer
            description: "ID of place"
        nutritional_value:
          type: object
          description: "The nutritional values for the drink"
          properties:
            serving:
              type: integer
              description: "Serving size in milliliters"
            energy:
              type: object
              properties:
                kJ:
                  type: integer
                kcal:
                  type: integer
            fat:
              type: number
            sat_fat:
              type: number
            carbs:
              type: number
            sugar:
              type: number
            protein:
              type: number
            fiber:
              type: number
            salt:
              type: number
    drink:
      type: object
      description: "A drink object"
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              description: "ID of the drink"
        - $ref: "#/components/schemas/drink_data"
    drinks:
      type: object
      description: "An object containing an array of drink objects"
      properties:
        drinks:
          type: array
          description: "Array of drinks"
          items:
            $ref: "#/components/schemas/drink"
    query_drinks:
      type: object
      description: "Query parameters for GET /drinks"
      properties:
        search:
          type: string
          description: "Search query from the search bar"
        fields:
          type: array
          description: "Whitelist of fields to return with the response, except for ID which is always returned"
          items:
            type: string
        limit:
          type: integer
          description: "The amount of entries to return with"
        cursor:
          type: integer
          description: "A pointer from where to start enumerating data from, used instead of a 'skip' parameter"
    
    user_data:
      type: object
      description: "A user objects data"
      required:
        - username
        - email
      properties:
        username:
          type: string
          description: "Username of user"
        first_name:
          type: string
          description: "First name of user"
        last_name:
          type: string
          description: "Last name of user"
        email:
          type: string
          description: "Email of user"
        registered_on:
          type: string
          description: "ISO 8601 date and time of when the user was added"

    user:
      type: object
      description: "A user object"
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              description: "ID of the user"
        - $ref: "#/components/schemas/user_data"

    users:
      type: object
      description: "An object containing an array of user objects"
      properties:
        users:
          type: array
          description: "Array of users"
          items:
            $ref: "#/components/schemas/user"

    query_users:
      type: object
      description: "Query parameters for GET /users"
      properties:
        search:
          type: string
          description: "Search query from the search bar"
        fields:
          type: array
          description: "Whitelist of fields to return with the response, except for ID which is always returned"
          items:
            type: string
        limit:
          type: integer
          description: "The amount of entries to return with"
        cursor:
          type: integer
          description: "A pointer from where to start enumerating data from, used instead of a 'skip' parameter"

    place_data:
      type: object
      description: "A place objects data"
      required:
        - name
        - address
      properties:
        name:
          type: string
          description: "Name of place"
        address:
          type: string
          description: "Address of place"

    place:
      type: object
      description: "A place object"
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              description: "ID of the place"
        - $ref: "#/components/schemas/place_data"

    places:
      type: object
      description: "An object containing an array of place objects"
      properties:
        places:
          type: array
          description: "Array of places"
          items:
            $ref: "#/components/schemas/place"

    query_places:
      type: object
      description: "Query parameters for GET /places"
      properties:
        search:
          type: string
          description: "Search query from the search bar"
        fields:
          type: array
          description: "Whitelist of fields to return with the response, except for ID which is always returned"
          items:
            type: string
        limit:
          type: integer
          description: "The amount of entries to return with"
        cursor:
          type: integer
          description: "A pointer from where to start enumerating data from, used instead of a 'skip' parameter"

    category_data_one:
      type: object
      description: "A category objects data"
      required:
        - name
      properties:
        parent_category:
          $ref: "#/components/schemas/category_one"
        name:
          type: string
          description: "Name of category"

    category_one:
      type: object
      description: "A category object"
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              description: "ID of the category"
        - $ref: "#/components/schemas/category_data_one"

    category_data_all:
      type: object
      description: "A category objects data"
      required:
        - name
      properties:
        name:
          type: string
          description: "Name of category"
        children:
            $ref: "#/components/schemas/categories"

    category_all:
      type: object
      description: "A category object"
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              description: "ID of the category"
        - $ref: "#/components/schemas/category_data_all"

    categories:
      type: object
      description: "An object containing an array of category objects"
      properties:
        categories:
          type: array
          description: "Array of categories"
          items:
            $ref: "#/components/schemas/category_all"

    query_categories:
      type: object
      description: "Query parameters for GET /categories"
      properties:
        search:
          type: string
          description: "Search query from the search bar"
        fields:
          type: array
          description: "Whitelist of fields to return with the response, except for ID which is always returned"
          items:
            type: string
        limit:
          type: integer
          description: "The amount of entries to return with"
        cursor:
          type: integer
          description: "A pointer from where to start enumerating data from, used instead of a 'skip' parameter"

tags:
  - name: users
    description: User operations
  - name: drinks
    description: Drink operations
  - name: places
    description: Place operations
  - name: categories
    description: Category operations

paths:
  /users:
    get:
      tags:
        - users
      description: "Query all users"
      parameters: []
      responses:
        "200":
          description: OK
  /users/{id}:
    get:
      tags:
        - users
      description: "Query user by ID"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            "application/json":
              examples:
                "Human Name":
                  value:
                    {
                      "username": "human_name",
                      "first_name": "Human",
                      "last_name": "Name",
                      "email": "human@example.com",
                      "registered_on": "2024-03-14T12:34:56",
                    }

  /places:
    get:
      tags:
        - places
      description: "Query all places"
      responses:
        "200":
          description: OK
  /categories:
    get:
      tags:
        - categories
      description: "Query all categories"
      responses:
        "200":
          description: OK

  /drinks:
    get:
      tags:
        - drinks
      description: "Query all drinks"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/query_drinks"
            examples:
              test:
                summary: Example
                value:
                  search: "ice"
                  fields: ["rating", "description"]
                  limit: 10
                  cursor: 0
      responses:
        "200":
          description: OK
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/drinks"
              examples:
                "Example":
                  value:
                    {
                      "drinks":
                        [
                          {
                            "id": 46,
                            "name": "J√§germeister",
                            "producer": "Mast-J√§germeister SE",
                            "brand": "J√§germeister",
                            "description": "J√§germeister (/Ààje…™…°…ôrma…™st…ôr/) is a German digestif made with 56 herbs and spices. Developed in 1934 by Wilhelm and Curt Mast, the recipe has not changed since its creation and continues to be served in its signature green glass bottle. It is the flagship product of Mast-J√§germeister SE headquartered in Wolfenb√ºttel, Germany. (Wikipedia)",
                            "product_image": "https://example.com/img/jagermeister.png",
                            "category": 42,
                            "added_on": "2024-03-14T12:34:56",
                            "rating": 78,
                            "volumes": [330, 500, 1000],
                            "abv": 0.35,
                            "places": [1, 3, 4],
                            "nutritional_value":
                              {
                                "serving": 20,
                                "energy": { "kJ": 209, "kcal": 50 },
                                "fat": 0.0,
                                "sat_fat": null,
                                "carbs": 2.8,
                                "sugar": 2.6,
                                "protein": 0.0,
                                "fiber": null,
                                "salt": null,
                              },
                          },
                          {
                            "id": 52,
                            "name": "A. Le Coq Long Drink Grapefruit",
                            "producer": "A. Le Coq AS",
                            "brand": "A. Le Coq",
                            "description": "The taste of the classic Long Drink Grapefruit, made from real gin, is dominated by the juicy character of grapefruit and as we know, juicy character is welcome in any company. Pleasantly sweet and quite bitter, this drink will spark long, fun conversations and suggests more music to lift your spirits!",
                            "product_image": "https://example.com/img/alecoq_long_grape.png",
                            "category": 21,
                            "added_on": "2024-03-14T12:34:56",
                            "rating": 71,
                            "volumes": [330],
                            "abv": 0.055,
                            "places": [1, 3, 4],
                            "nutritional_value":
                              {
                                "serving": 100,
                                "energy": { "kJ": 223, "kcal": 53 },
                                "fat": 0.0,
                                "sat_fat": 0.0,
                                "carbs": 5.5,
                                "sugar": 5.5,
                                "protein": 0.0,
                                "fiber": 0.0,
                                "salt": 0.0,
                              },
                          },
                        ],
                    }
    post:
      tags:
        - drinks
      description: "Add a drink to the database"
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/drink_data"
      responses:
        "200":
          description: Responds back with the added drink
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/drink"

  /drinks/{id}:
    get:
      tags:
        - drinks
      description: ""
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/drink"
              examples:
                "J√§germeister":
                  value:
                    {
                      "id": 46,
                      "name": "J√§germeister",
                      "producer": "Mast-J√§germeister SE",
                      "brand": "J√§germeister",
                      "description": "J√§germeister (/Ààje…™…°…ôrma…™st…ôr/) is a German digestif made with 56 herbs and spices. Developed in 1934 by Wilhelm and Curt Mast, the recipe has not changed since its creation and continues to be served in its signature green glass bottle. It is the flagship product of Mast-J√§germeister SE headquartered in Wolfenb√ºttel, Germany. (Wikipedia)",
                      "product_image": "https://example.com/img/jagermeister.png",
                      "category": 42,
                      "added_on": "2024-03-14T12:34:56",
                      "rating": 78,
                      "volumes": [330, 500, 1000],
                      "abv": 0.35,
                      "places": [1, 3, 4],
                      "nutritional_value":
                        {
                          "serving": 20,
                          "energy": { "kJ": 209, "kcal": 50 },
                          "fat": 0.0,
                          "sat_fat": null,
                          "carbs": 2.8,
                          "sugar": 2.6,
                          "protein": 0.0,
                          "fiber": null,
                          "salt": null,
                        },
                    }
                "A. Le Coq Long Drink Grapefruit":
                  value:
                    {
                      "id": 52,
                      "name": "A. Le Coq Long Drink Grapefruit",
                      "producer": "A. Le Coq AS",
                      "brand": "A. Le Coq",
                      "description": "The taste of the classic Long Drink Grapefruit, made from real gin, is dominated by the juicy character of grapefruit and as we know, juicy character is welcome in any company. Pleasantly sweet and quite bitter, this drink will spark long, fun conversations and suggests more music to lift your spirits!",
                      "product_image": "https://example.com/img/alecoq_long_grape.png",
                      "category": 21,
                      "added_on": "2024-03-14T12:34:56",
                      "rating": 71,
                      "volumes": [330],
                      "abv": 0.055,
                      "places": [1, 3, 4],
                      "nutritional_value":
                        {
                          "serving": 100,
                          "energy": { "kJ": 223, "kcal": 53 },
                          "fat": 0.0,
                          "sat_fat": 0.0,
                          "carbs": 5.5,
                          "sugar": 5.5,
                          "protein": 0.0,
                          "fiber": 0.0,
                          "salt": 0.0,
                        },
                    }
    delete:
      tags:
        - drinks
      description: ""
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
    patch:
      tags:
        - drinks
      description: ""
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
  /drinks/{id}/rate:
    put:
      tags:
        - drinks
      description: ""
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        # - name: rating
        #   in: query
        #   required: true
        #   schema:
        #     type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: integer
            examples:
              test:
                summary: Example
                value:
                  rating: 70
      responses:
        "200":
          description: OK
